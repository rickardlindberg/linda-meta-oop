actor Main = "Args" -> selftest()

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [grid:x] !. -> put(x)
    where
        grid  = line*:xs                  -> ["Grid" ["Columns" ~transpose(xs)]]
        line  = char:x char*:xs '\n'      -> { x xs }
        char  = '#' | '.' | 'O'

def transpose rows =
    assert len(set(len(x) for x in rows)) == 1
    return [
        "".join(rows[row][column] for row in range(len(rows)))
        for column in range(len(rows[0]))
    ]

actor LoadCalculator =
    "Grid" ["Columns" loadColumn*:xs !.] !. -> put(["Loads" ~xs])
    where
        loadColumn = .:x -> calculateLoad(roll(x))

def calculateLoad line =
    return sum(
        len(line)-pos if char == "O" else 0
        for pos, char in enumerate(line)
    )

def roll line =
    newLine = []
    loadSum = 0
    skippedDots = []
    for pos in range(len(line)):
        if line[pos] == "O":
            newLine.append("O")
        elif line[pos] == "#":
            newLine.extend(skippedDots)
            newLine.append("#")
            skippedDots = []
        else:
            skippedDots.append(".")
    newLine.extend(skippedDots)
    assert len(newLine) == len(line)
    return "".join(newLine)

actor Summer =
    "Loads" .*:xs !. -> put(["Result" sum(xs)])

actor LoadCycler =
    "Grid" ["Columns" .*:xs !.] !. -> put(["Result" cycle(xs)])

def cycle grid =
    assert transpose(transpose(grid)) == grid
    grid = transpose(grid)
    seenAtIteration = {}
    left = 1_000_000_000
    iterations = 0
    while left > 0:
        assert iterations + left == 1_000_000_000
        gridKey = tuple(grid)
        if gridKey in seenAtIteration:
            loopSize = iterations - seenAtIteration[gridKey]
            if loopSize <= left:
                gg = grid
                for floppa in range(loopSize):
                    gg = doOneCycle(gg)
                assert gg == grid
                x = loopSize * (left // loopSize)
                left -= x
                iterations += x
                continue
        else:
            seenAtIteration[gridKey] = iterations
        left -= 1
        iterations += 1
        grid = doOneCycle(grid)
    assert left == 0
    assert iterations == 1_000_000_000
    return sum(calculateLoad(line) for line in transpose(grid))

def doOneCycle grid =
    for dir in "NWSE":
        if dir in "NS":
            grid = transpose(grid)
            if dir == "N":
                grid = [roll(line) for line in grid]
            else:
                assert dir == "S"
                grid = [roll(line[::-1])[::-1] for line in grid]
            grid = transpose(grid)
        else:
            if dir == "W":
                grid = [roll(line) for line in grid]
            else:
                assert dir == "E"
                grid = [roll(line[::-1])[::-1] for line in grid]
    return grid

universe Part1 =
    CLI()
    Parser()
    LoadCalculator()
    Summer()
    examples
        ["Args" "example.txt"] -> [["Result" 136]]
        ["Args" "input.txt"] -> [["Result" 105784]]

universe Part2 =
    CLI()
    Parser()
    LoadCycler()
    examples
        ["Args" "example.txt"] -> [["Result" 64]]
        ["Args" "input.txt"] -> [["Result" 91286]]
