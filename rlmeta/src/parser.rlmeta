Parser {
  run =
    | "SourceCode" .:p [file:x]               -> put(["Ast" p x])
  file =
    | ^actor*:xs space !.                     -> xs
  actor =
    | name:x ^field*:ys ^'{' ^rule*:zs ^'}'   -> ["Actor" x ys ~zs]
  field =
    | '#' name:x                              -> ["Field" x]
  rule =
    | name:x ^'=' ^choice:y                   -> ["Rule" x y]
  choice =
    | '|'? ^sequence:x (^'|' ^sequence)*:xs   -> ["Or" x ~xs]
  sequence =
    | ^expr*:xs ^maybeAction:ys               -> ["Scope" ["And" ~xs ~ys]]
  expr =
    | expr1:x ':' name:y                      -> ["Bind" y x]
    | '[' ^expr*:xs ^']'                      -> ["MatchList" ["And" ~xs]]
    | expr1
  expr1 =
    | expr2:x '*'                             -> ["Star" x]
    | expr2:x '?'                             -> ["Or" x ["And"]]
    | '!' expr2:x                             -> ["Not" x]
    | '%'                                     -> ["MatchCallRule"]
    | expr2
  expr2 =
    | '^' expr3:x                             -> ["And" ["MatchRule" "space"] x]
    | expr3
  expr3 =
    | name:x !^'='                            -> ["MatchRule" x]
    | char:x '-' char:y                       -> ["MatchObject" ["Range" x y]]
    | '\'' (!'\'' matchChar)*:xs '\''         -> ["And" ~xs]
    | '.'                                     -> ["MatchObject" ["Any"]]
    | '(' ^choice:x ^')'                      -> x
    | number:x                                -> ["MatchObject" ["Eq" x]]
    | string:x                                -> ["MatchObject" ["Eq" x]]
    | '#' name:x                              -> ["MatchObject" ["State" x]]
  matchChar =
    | innerChar:x                             -> ["MatchObject" ["Eq" x]]
  maybeAction =
    | actionExpr:x                            -> [["Action" x]]
    |                                         -> []
  actionExpr =
    | '->' ^hostExpr:x
      (':' name | -> ""):y ^actionExpr:z      -> ["Set" y x z]
    | '->' ^hostExpr
  hostExpr =
    | string:x                                -> ["String" x]
    | number:x                                -> ["Number" x]
    | '[' ^hostListItem*:xs ^']'              -> ["List" ~xs]
    | '{' ^hostExpr*:xs ^'}'                  -> ["Format" ~xs]
    | var:x ^'(' ^hostExpr*:ys ^')'           -> ["Call" x ~ys]
    | var
  hostListItem =
    | '~'*:ys hostExpr:x                      -> ["ListItem" len(ys) x]
  var =
    | name:x !^'='                            -> ["Lookup" x]
  string    = '"'  (!'"'  innerChar)*:xs '"'  -> { xs }
  char      = '\''  !'\'' innerChar:x    '\'' -> x
  innerChar = '\\' escape | .
  escape    = '\\' -> "\\" | '\'' -> "'"
            | '"'  -> "\"" | 'n'  -> "\n"
  number    = '0'-'9':x '0'-'9'*:xs           -> int({ x xs })
  name      = nameStart:x nameChar*:xs        -> { x xs }
  nameStart = 'a'-'z' | 'A'-'Z'
  nameChar  = 'a'-'z' | 'A'-'Z' | '0'-'9'
  space     = (' ' | '\n')*
}
