actor Main = "Args" -> selftest()

universe ParseTest =
    CLI()
    RecordParser()
    examples
        ["Args" "example.txt"] -> [["Records"
            ["Record" 7 9] ["Record" 15 40] ["Record" 30 200]
        ]]

universe MarginTest =
    CLI()
    RecordParser()
    MarginCalculator()
    examples
        ["Args" "example.txt"] -> [["Margins" 4 8 9]]

universe Part1 =
    CLI()
    RecordParser()
    MarginCalculator()
    MarginProduct()
    examples
        ["Args" "example.txt"] -> [["Result" 288]]
        ["Args" "input.txt"] -> [["Result" 303600]]

def mul x y =
    return x*y

universe Part2 =
    CLI()
    RecordParserBetterKerning()
    MarginCalculator()
    MarginProduct()
    examples
        ["Args" "example.txt"] -> [["Result" 71503]]
        ["Args" "input.txt"] -> [["Result" 23654842]]

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor RecordParser =
    "File" [races:xs] !. -> put(["Records" ~xs])
    where
        races =
            'Time:' ^number*:xs ^'\n'
            'Distance:' ^number*:ys ^'\n'
            !. -> zip("Record" xs ys)
        number = digit:x digit*:xs -> int({x xs})
        digit = '0'-'9'
        space = ' '*

actor RecordParserBetterKerning =
    "File" [races:xs] !. -> put(["Records" ~xs])
    where
        races =
            'Time:' ^number*:xs ^'\n'
            'Distance:' ^number*:ys ^'\n'
            !. -> zip("Record" xs ys)
        number = ^digit:x ^digit*:xs -> int({x xs})
        digit = '0'-'9'
        space = ' '*

actor MarginCalculator =
    "Records" record*:xs !. -> put(["Margins" ~xs])
    where
        record = ["Record" .:time .:distance !.] -> margin(time distance)

actor MarginProduct =
    "Margins" product:x !. -> put(["Result" x])
    where
        product =
            | .:x !. -> x
            | .:x product:y -> mul(x y)

def zip name xs ys =
    assert len(xs) == len(ys)
    result = []
    for i, x in enumerate(xs):
        result.append([name, x, ys[i]])
    return result

def margin time distance =
    margin = 0
    for ms in range(time):
        if (time-ms)*ms > distance:
            margin += 1
    return margin
