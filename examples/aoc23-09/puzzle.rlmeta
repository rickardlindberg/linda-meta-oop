universe Part1 =
    CLI()
    Parser()
    ForwardExtrapolator()
    Summer()
    examples
        ["Args" "example.txt"] -> [["Result" 114]]
        ["Args" "input.txt"] -> [["Result" 1916822650]]

universe Part2 =
    CLI()
    Parser()
    BackwardsExtrapolator()
    Summer()
    examples
        ["Args" "example.txt"] -> [["Result" 2]]
        ["Args" "input.txt"] -> [["Result" 966]]

actor Main = "Args" -> selftest()

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [entries:x] !. -> put(x)
    where
        entries = entry*:xs !.             -> ["Entries" ~xs]
        entry   = ^number*:xs ^'\n'        -> ["Entry" ~xs]
        number  = sign:x digit:y digit*:ys -> int({x y ys})
        sign    = '-' | -> ""
        digit   = '0'-'9'
        space   = ' '*

actor ForwardExtrapolator =
    "Entries" extrapolate*:xs !. -> put(["Extrapolated" ~xs])
    where
        extrapolate = ["Entry" .*:xs !.] -> extrapolateForward(xs)

def extrapolateForward numbers =
    if sum(numbers) == 0:
        return 0
    else:
        next = []
        previous = numbers[0]
        for number in numbers[1:]:
            next.append(number - previous)
            previous = number
        return numbers[-1] + extrapolateForward(next)

actor BackwardsExtrapolator =
    "Entries" extrapolate*:xs !. -> put(["Extrapolated" ~xs])
    where
        extrapolate = ["Entry" .*:xs !.] -> extrapolateBackwards(xs)

def extrapolateBackwards numbers =
    if sum(numbers) == 0:
        return 0
    else:
        next = []
        previous = numbers[0]
        for number in numbers[1:]:
            next.append(number - previous)
            previous = number
        return numbers[0] - extrapolateBackwards(next)

actor Summer =
    "Extrapolated" .*:xs !. -> put(["Result" sum(xs)])
