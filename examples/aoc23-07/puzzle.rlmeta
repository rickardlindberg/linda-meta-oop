CLI {
    run = "Args" .:input !. -> put(["File" read(input)])
}

HandParser {
    run = "File" [hand*:xs !.] !. -> put(["Hands" ~xs])
    hand = card*:xs ^number:y '\n' -> ["Card" y ~xs]
    card =
        | 'A'
        | 'K'
        | 'Q'
        | 'J'
        | 'T'
        | '2'-'9'
    number = digit:x digit*:xs -> int({x xs})
    digit = '0'-'9'
    space = ' '*
}

CardRanker {
    run = "Hands" rank*:xs !. -> put(["RankedHands" ~xs])
    rank = ["Card" .:bid rankCard*:xs !.] -> ["RankedHand" bid totalRank(xs) ~xs]
    rankCard =
        | "A"       -> 14
        | "K"       -> 13
        | "Q"       -> 12
        | "J"       -> 11
        | "T"       -> 10
        | '2'-'9':x -> int(x)
}

def totalRank(cards):
    map = {}
    for x in cards:
        if x not in map:
            map[x] = 1
        else:
            map[x] += 1
    buckets = sorted(map.values())
    if buckets == [5]:
        return 6
    elif buckets == [1, 4]:
        return 5
    elif buckets == [2, 3]:
        return 4
    elif buckets == [1, 1, 3]:
        return 3
    elif buckets == [1, 2, 2]:
        return 2
    elif buckets == [1, 1, 1, 2]:
        return 1
    else:
        assert buckets == [1, 1, 1, 1, 1], buckets
        return 0

CardRankerJoker {
    run = "Hands" rank*:xs !. -> put(["RankedHands" ~xs])
    rank = ["Card" .:bid rankCard*:xs !.] -> ["RankedHand" bid totalRankJoker(xs) ~xs]
    rankCard =
        | "A"       -> 13
        | "K"       -> 12
        | "Q"       -> 11
        | "T"       -> 10
        | '2'-'9':x -> int(x)
        | "J"       -> 1
}

def totalRankJoker(cards):
    map = {}
    joker_count = 0
    for x in cards:
        if x == 1:
            joker_count += 1
        else:
            if x not in map:
                map[x] = 1
            else:
                map[x] += 1
    if joker_count == 5:
        buckets = [5]
    else:
        max_key = max(map.items(), key=lambda x: x[1])[0]
        map[max_key] += joker_count
        buckets = sorted(map.values())
    if buckets == [5]:
        return 6
    elif buckets == [1, 4]:
        return 5
    elif buckets == [2, 3]:
        return 4
    elif buckets == [1, 1, 3]:
        return 3
    elif buckets == [1, 2, 2]:
        return 2
    elif buckets == [1, 1, 1, 2]:
        return 1
    else:
        assert buckets == [1, 1, 1, 1, 1], buckets
        return 0

CardSorter {
    run = "RankedHands" .*:xs !. -> put(["SortedHands" ~sortHands(xs)])
}

def sortHands(hands):
    return sorted(hands, key=lambda hand: hand[2:])

CalculateWinnings {
    run = "SortedHands" hand*:xs !.
        -> Counter():rank
        -> rank()
        -> put(["Result" sum(xs)])
    hand = ["RankedHand" .:bid]
        -> mul(rank() bid)
}
