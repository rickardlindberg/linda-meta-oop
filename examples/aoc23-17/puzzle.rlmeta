universe Part1 =
    CLI()
    Parser()
    ShortestPathFinder(findNeighboursPart1 "part1")
    examples
        ["Args" "example.txt"] -> [["Result" 102]]
        ["Args" "input.txt"] -> [["Result" 1023]]

universe Part2 =
    CLI()
    Parser()
    ShortestPathFinder(findNeighboursPart2 "part2")
    examples
        ["Args" "example.txt"] -> [["Result" 94]]
        ["Args" "example2.txt"] -> [["Result" 71]]

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [map:x] !. -> put(x)
    where
        map   = row*:xs !.     -> ["Map" countColumns(xs) len(xs) xs]
        row   = digit*:xs '\n' -> xs
        digit = '1'-'9':x      -> int(x)
    examples
        ["File" "123\n456\n"] -> [
            ["Map"
                3
                2
                [
                    [1 2 3]
                    [4 5 6]
                ]
            ]
        ]

def countColumns rows =
    columns = [len(x) for x in rows]
    assert len(set(columns))
    return columns[0]

actor ShortestPathFinder #findNeighbours #part =
    "Map" .:width .:height .:map -> put(["Result" astar(
        tuple(0 0)
        tuple(dec(width) dec(height))
        map
        findNeighbours
        part
    )])

universe ShortestPathFinderPart1Examples =
    ShortestPathFinder(findNeighboursPart1 "part1")
    examples
        ["Map" 3 1 [
            [1 2 1]
        ]] -> [["Result" 3]]
        ["Map" 5 1 [
            [1 1 1 1 1]
        ]] -> [["Result" "no path found"]]
        ["Map" 5 2 [
            [1 1 1 1 1]
            [1 1 1 9 1]
        ]] -> [["Result" 7]]
        ["Map" 3 2 [
            [1 9 8]
            [1 1 1]
        ]] -> [["Result" 3]]
        ["Map" 3 3 [
            [1 1 9]
            [9 1 5]
            [9 6 1]
        ]] -> [["Result" 8]]

universe ShortestPathFinderPart2Examples =
    ShortestPathFinder(findNeighboursPart2 "part2")
    examples
        ["Map" 12 5 [
            [1 1 1 1 1 1 1 1 1 1 1 1]
            [1 1 1 1 1 1 1 1 1 1 1 1]
            [1 1 1 1 1 1 1 1 1 1 1 1]
            [1 1 1 1 1 1 1 1 1 1 1 1]
            [4 4 4 4 4 4 4 4 4 4 4 1]
        ]] -> [["Result" 27]]
        ["Map" 12 5 [
            [1 1 1 1 1 1 1 1 1 1 1 1]
            [1 1 1 1 1 1 1 1 1 1 1 1]
            [1 1 1 1 1 1 1 1 1 1 1 1]
            [1 1 1 1 1 1 1 1 1 1 1 1]
            [1 1 1 1 1 1 1 1 1 1 1 1]
        ]] -> [["Result" 15]]
        ["Map" 12 5 [
            [9 1 1 1 1 9 9 9 9 9 9 9]
            [9 9 9 9 1 9 9 9 9 9 9 9]
            [9 9 9 9 1 9 9 9 9 9 9 9]
            [9 9 9 9 1 9 9 9 9 9 9 9]
            [9 9 9 9 1 1 1 1 1 1 1 1]
        ]] -> [["Result" 15]]
        ["Map" 12 5 [
            [9 9 9 9 9 1 1 1 1 1 1 1]
            [1 9 9 9 9 1 9 9 9 9 9 1]
            [1 9 9 9 9 1 9 9 9 9 9 1]
            [1 9 9 9 9 1 9 9 9 9 9 1]
            [1 1 1 1 1 1 9 9 9 9 9 1]
        ]] -> [["Result" 23]]
        ["Map" 12 5 [
            [9 9 9 1 1 1 1 1 1 1 1 1]
            [1 9 9 1 9 9 9 9 9 9 9 1]
            [1 9 9 1 9 9 9 9 9 9 9 1]
            [1 9 9 1 9 9 9 9 9 9 9 1]
            [1 1 1 1 9 9 9 9 9 9 9 1]
        ]] -> [["Result" 55]]
        ["Map" 1 5 [
            [9]
            [1]
            [1]
            [1]
            [1]
        ]] -> [["Result" 4]]
        ["Map" 1 4 [
            [9]
            [1]
            [1]
            [1]
        ]] -> [["Result" "no path found"]]
        ["Map" 1 11 [
            [9]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
        ]] -> [["Result" 10]]
        ["Map" 1 12 [
            [9]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
            [1]
        ]] -> [["Result" "no path found"]]

def astar start goal map findNeighbours part =
    estimates = {start: ideal(start, goal)}
    cost = {start: 0}
    cameFrom = {}
    openSet = [start]
    while openSet:
        openSet = sorted(openSet, key=lambda x: estimates[x])
        next = openSet.pop(0)
        x, y = next[:2]
        if part == "part1" and next[:2] == goal[:2]:
            return cost[next]
        if part == "part2" and next[:2] == goal[:2] and next[3] > 3:
            return cost[next]
        for neighbour in findNeighbours(next, map, cameFrom):
            xN, yN = neighbour[:2]
            neighbourCost = cost[next] + map[yN][xN]
            if neighbour not in cost or neighbourCost < cost[neighbour]:
                cameFrom[neighbour] = next
                cost[neighbour] = neighbourCost
                estimates[neighbour] = neighbourCost + ideal(neighbour, goal)
                if neighbour not in openSet:
                    openSet.append(neighbour)
    return "no path found"

def findNeighboursPart1 node map cameFrom =
    x, y = node[:2]
    if len(node) == 4:
        repeatedDir = node[2]
        repeatCount = node[3]
    else:
        repeatedDir = None
        repeatCount = 0
    up    = (x,   y-1, "vertical",   repeatCount+1 if repeatedDir == "vertical"   else 1)
    down  = (x,   y+1, "vertical",   repeatCount+1 if repeatedDir == "vertical"   else 1)
    left  = (x-1, y,   "horizontal", repeatCount+1 if repeatedDir == "horizontal" else 1)
    right = (x+1, y,   "horizontal", repeatCount+1 if repeatedDir == "horizontal" else 1)
    candidates = [up, down, left, right]
    for candidate in list(candidates):
        xc, yc = candidate[:2]
        if candidate[3] > 3:
            candidates.remove(candidate)
        elif xc < 0 or yc < 0 or cameFrom.get(node, (None, None))[:2] == candidate[:2]:
            candidates.remove(candidate)
        else:
            try:
                map[yc][xc]
            except IndexError:
                candidates.remove(candidate)
    return candidates

def reconstruct node cameFrom =
    path = [node[:2]]
    while node in cameFrom:
        node = cameFrom[node]
        path.insert(0, node[:2])
    return path

def ideal start end =
    x1, y1 = start[:2]
    x2, y2 = end[:2]
    return abs(x1-x2) + abs(y1-y2)

def findNeighboursPart2 node map cameFrom =
    x, y = node[:2]
    if len(node) == 4:
        repeatedDir = node[2]
        repeatCount = node[3]
    else:
        repeatedDir = None
        repeatCount = 0
    up    = (x,   y-1, "vertical",   repeatCount+1 if repeatedDir == "vertical"   else 1)
    down  = (x,   y+1, "vertical",   repeatCount+1 if repeatedDir == "vertical"   else 1)
    left  = (x-1, y,   "horizontal", repeatCount+1 if repeatedDir == "horizontal" else 1)
    right = (x+1, y,   "horizontal", repeatCount+1 if repeatedDir == "horizontal" else 1)
    candidates = [up, down, left, right]
    for candidate in list(candidates):
        xc, yc = candidate[:2]
        if repeatCount < 4 and candidate[3] != repeatCount+1:
            candidates.remove(candidate)
        elif candidate[3] > 10:
            candidates.remove(candidate)
        elif xc < 0 or yc < 0 or cameFrom.get(node, (None, None))[:2] == candidate[:2]:
            candidates.remove(candidate)
        else:
            try:
                map[yc][xc]
            except IndexError:
                candidates.remove(candidate)
    return candidates
