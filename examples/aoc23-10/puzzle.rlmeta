actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [map:x] !. -> put(x)
    where
        map   = row*:xs     -> Counter():nextPosY
                            -> ["Map" ~~xs]
        row   = col*:xs '\n'-> Counter():nextPosX
                            -> nextPosY():posY
                            -> xs
        col   = shape:z     -> nextPosX():posX
                            -> ["Node" posX posY ~z]
        shape =
            | '|' -> [[posX decrement(posY)] [posX increment(posY)]]
            | '-' -> [[decrement(posX) posY] [increment(posX) posY]]
            | 'L' -> [[posX decrement(posY)] [increment(posX) posY]]
            | 'J' -> [[posX decrement(posY)] [decrement(posX) posY]]
            | '7' -> [[decrement(posX) posY] [posX increment(posY)]]
            | 'F' -> [[increment(posX) posY] [posX increment(posY)]]
            | '.' -> []
            | 'S' -> ["START"]

actor Flattener =
    | "Map" indexNode*:xs !.
        -> Counter():nextId
        -> dict():nodeIds
        -> put(["IndexedMap" nodeIds ~xs])
    | "IndexedMap" .:nodeIds flattenNode*:xs !.
        -> nodeIds:nodeIds
        -> put(["FlatMap" ~xs])
    where
        indexNode = ["Node" .:x .:y .*:zs]
            -> storePosToId(nodeIds x y nextId())
            -> zs
        flattenNode =
            | ["START" !.]         -> "START"
            | [flattenEdge*:zs !.] -> zs
        flattenEdge =
            [.:a .:b !.] -> lookupPosToId(nodeIds a b)

def storePosToId nodeIds x y id =
    nodeIds[(x, y)] = id

def lookupPosToId nodeIds x y =
    return nodeIds.get((x, y), None)

actor StepMaximizer =
    "FlatMap" .*:nodes !. -> put(["Result" maxSteps(nodes)])

def maxSteps nodes =
    def furthest(id):
        visited = {id}
        nextNodes = nodes[id]
        steps = 0
        while nextNodes:
            steps += 1
            newNextNodes = []
            for nextNode in nextNodes:
                visited.add(nextNode)
                newNextNodes.extend(x for x in nodes[nextNode] if x not in visited)
            nextNodes = newNextNodes
        return steps
    startNode = None
    startEdges = []
    for id in range(len(nodes)):
        if nodes[id] == "START":
            startNode = id
        else:
            for next in nodes[id]:
                if next is not None and nodes[next] == "START":
                    startEdges.append(id)
    if startNode is None:
        return None
    else:
        assert len(startEdges) == 2
        nodes[startNode] = startEdges
        return furthest(startNode)
