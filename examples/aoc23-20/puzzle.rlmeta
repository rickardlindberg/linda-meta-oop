universe Part1 =
    CLI()
    Parser()
    ConjunctionAugmenter()

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [config:x !.] !. -> put(x)
    where
        config  = module*:xs             -> ["Configuration" ~xs]
        module  = type:t name:x ' -> '
                  targets:xs '\n'        -> [t x xs]
        targets = name:x (', ' name)*:xs -> [x ~xs]
        name    = char:x char*:xs        -> { x xs }
        char    = 'a'-'z'
        type    =
            | '%' -> "FlipFlop"
            | '&' -> "Conjunction"
            |     -> "Module"
    examples
        ["File" {
            "broadcaster -> a, b, c\n"
            "%a -> b\n"
            "%b -> c\n"
            "%c -> inv\n"
            "&inv -> a\n"
        }] -> [["Configuration"
            ["Module" "broadcaster" ["a" "b" "c"]]
            ["FlipFlop" "a" ["b"]]
            ["FlipFlop" "b" ["c"]]
            ["FlipFlop" "c" ["inv"]]
            ["Conjunction" "inv" ["a"]]
        ]]

actor ConjunctionAugmenter =
    "Configuration" module*:xs
        -> dict():ins
        -> put(["Program" ~xs])
    where
        module =
            | ["Conjunction":type .:name .:out]
                -> [type name ["In" ~readIn(ins name)] ["Out" ~out]]
            | [.:type .:name [out*:outs]]
                -> name:fromName
                -> [type name outs]
        out = .:toName
            -> registerTransition(ins fromName toName)
            -> toName
    examples
        ["Configuration"
            ["Module" "broadcaster" ["a" "b"]]
            ["FlipFlop" "a" ["b"]]
            ["FlipFlop" "b" ["inv"]]
            ["Conjunction" "inv" ["a"]]
        ] -> [
            ["Program"
                ["Module" "broadcaster" ["a" "b"]]
                ["FlipFlop" "a" ["b"]]
                ["FlipFlop" "b" ["inv"]]
                ["Conjunction" "inv" ["In" "b"] ["Out" "a"]]
            ]
        ]

actor PulseCounter =
    | "Program" module*:xs !.
        -> xs
        -> put(["Pulser" [["broadcaster" "low"]] 1 0])
    | "Pulser" [!.] .:low .:high !.
        -> put(["Pulses" low high])
    where
        module =
            | ["Module" .:name .:outs]
                -> spawn(Forwarder(name outs))
            | ["FlipFlop" .:name .:outs]
                -> spawn(FlipFlopper(name outs dict([["state" "low"]])))
            | ["Conjunction" .:name ["In" .*:ins] ["Out" .*:outs]]
    examples
        ["Program"
            ["Module" "broadcaster" ["a"]]
            ["FlipFlop" "a" ["a"]]
        ] -> [
            ["Pulses" 2 1]
        ]

actor FlipFlopper #name #outs #state =
    | "Pulser" [[#name "low"] .*:xs] .:low .:high !.
        -> flip(get(state "state") name outs):x
        -> set(state "state" get(x "state"))
        -> put(["Pulser"
               [~xs ~get(x "pulses")]
               add(low get(x "lowCount"))
               add(high get(x "highCount"))
           ])
    | "Pulser" [[#name "high"] .*:xs] .:low .:high !.
        -> put(["Pulser" xs low high])

actor Forwarder #name #outs =
    | "Pulser" [[#name "low"] .*:xs] .:low .:high !.
        -> put(["Pulser"
               [~xs ~pulseOut(outs "low")]
               add(low 1)
               high
           ])
    | "Pulser" [[#name "high"] .*:xs] .:low .:high !.
        -> put(["Pulser"
               [~xs ~pulseOut(outs "high")]
               low
               add(high 1)
           ])

def add x y =
    return x + y

def flip state name outs =
    lowCount = 0
    highCount = 0
    if state == "low":
        flipped = "high"
        highCount += 1
    elif state == "high":
        flipped = "low"
        lowCount += 1
    else:
        raise ValueError("invalid state")
    return {
        "state": flipped,
        "lowCount": lowCount,
        "highCount": highCount,
        "pulses": pulseOut(outs, flipped),
    }

def pulseOut outs pulse =
    return [[out, pulse] for out in outs]

def get dict name =
    return dict[name]

def set dict name value =
    dict[name] = value

def readIn ins name =
    if name not in ins:
        ins[name] = []
    return ins[name]

def registerTransition ins fromName toName =
    if toName not in ins:
        ins[toName] = []
    ins[toName].append(fromName)
