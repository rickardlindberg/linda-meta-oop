actor Main = "Args" -> selftest()

universe ParseTest =
    CLI()
    AlmanacParser()
    examples
        ["Args" "example1.txt"] -> [["Seeds" 79 14 55 13]]

universe SeederTest =
    CLI()
    AlmanacParser()
    Seeder()
    examples
        ["Args" "example1.txt"] -> [
            ["Location" 0 82]
            ["Location" 1 43]
            ["Location" 2 86]
            ["Location" 3 35]
        ]

universe Part1 =
    CLI()
    AlmanacParser()
    Seeder()
    LocationMapper()
    LocationMinimizer()
    examples
        ["Args" "input1.txt"] -> [["Result" 600279879]]

universe Part2 =
    CLI()
    AlmanacParser()
    SeederRange()
    LocationMapper()
    LocationMinimizerRange()
    examples
        ["Args" "example1.txt"] -> [["Result" 46]]
        ["Args" "input1.txt"] -> [["Result" 20191102]]

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor AlmanacParser =
    "File" [contents:x] !. -> put(x)
    where
        contents =
            seeds:a
            seedToSoil:b soilToFertilizer:c fertilizerToWater:d
            waterToLight:e lightToTemp:f tempToHumidity:g humidityToLocation:h !.
            -> b -> c -> d -> e -> f -> g -> h
            -> a
        seeds =
            'seeds:' ^number*:xs '\n\n' -> ["Seeds" ~xs]
        seedToSoil =
            'seed-to-soil map:\n' map:x '\n' -> spawn(Mapper("Seed" "Soil" x))
        soilToFertilizer =
            'soil-to-fertilizer map:\n' map:x '\n' -> spawn(Mapper("Soil" "Fertilizer" x))
        fertilizerToWater =
            'fertilizer-to-water map:\n' map:x '\n' -> spawn(Mapper("Fertilizer" "Water" x))
        waterToLight =
            'water-to-light map:\n' map:x '\n' -> spawn(Mapper("Water" "Light" x))
        lightToTemp =
            'light-to-temperature map:\n' map:x '\n' -> spawn(Mapper("Light" "Temp" x))
        tempToHumidity =
            'temperature-to-humidity map:\n' map:x '\n' -> spawn(Mapper("Temp" "Humidity" x))
        humidityToLocation =
            'humidity-to-location map:\n' map:x -> spawn(Mapper("Humidity" "Location" x))

        map = mapLine*
        mapLine = ^number:x ^number:y ^number:z ^'\n' -> [x y z]
        number = '0'-'9':x '0'-'9'*:xs -> int({x xs})
        space = ' '*

actor Mapper #source #target #map =
    #source .:id .:number -> put([target id doMap(map number)])

actor Seeder =
    "Seeds" seed*:xs !.
        -> Counter():next
        -> xs
        -> spawn(PartCollector(0 sub(next() 1) [] ["Locations"]))
    where
        seed = .:x -> put(["Seed" next() x])

actor SeederRange =
    "Seeds" seed*:xs !.
        -> Counter():next
        -> xs
        -> spawn(PartCollector(0 sub(next() 1) [] ["Locations"]))
    where
        seed = .:start .:len -> put(["Seed" next() [[start len]]])

actor LocationMapper =
    "Location" .*:xs -> put(["Part" ~xs])

actor LocationMinimizer =
    "Locations" [.*:xs] -> put(["Result" min(xs)])

actor LocationMinimizerRange =
    "Locations" [locationRange*:xs !.] !. -> put(["Result" min([~~xs])])
    where
        locationRange = [minLocation*:xs !.] -> xs
        minLocation = [.:x . !.] -> x

def doMap mapSpec number =
    if isinstance(number, list):
        result = []
        for start, size in number:
            result.extend(mapRange(start, size, mapSpec))
        return result
    else:
        for target, source, size in mapSpec:
            if number >= source and number <= (source+size):
                return number - source + target
        return number

def mapRange start size mapSpec =
    result = []
    left = [[start, size]]
    for specTarget, specSource, specSize in mapSpec:
        next_left = []
        for start, size in left:
            x, y = mapRangeSingle(start, size, specTarget, specSource, specSize)
            next_left.extend(x)
            result.extend(y)
        left = next_left
    return result+left

def mapRangeSingle start size specTarget specSource specSize =
    left = []
    result = []
    end = start + size
    spec_end = specSource + specSize
    overlap_start = min(end, max(start, specSource))
    overlap_end = max(start, min(spec_end, end))
    overlap_size = overlap_end - overlap_start
    left_size = overlap_start - start
    right_size = size - overlap_size - left_size
    if left_size > 0:
        left.append([start, left_size])
    if overlap_size > 0:
        result.append([overlap_start+specTarget-specSource, overlap_size])
    if right_size > 0:
        left.append([overlap_start+overlap_size, right_size])
    assert left_size+overlap_size+right_size == size
    return left, result

def sub x y =
    return x - y

// TODO: how to test in rlmeta?
// x = mapRange(0, 10, [(20, 0, 5)])
// assert x == [[20, 5], [5, 5]], x
// x = mapRange(10, 10, [(20, 6, 5)])
// # 6 -> 20
// # 7 -> 21
// # 8 -> 22
// # 9 -> 23
// # 10 -> 24
// assert x == [[24, 1], [11, 9]], x
// x = mapRangeSingle(0, 10, 100, 5, 5)
// # 5 -> 100
// # 6 -> 101
// # 7 -> 102
// # 8 -> 103
// # 9 -> 104
// assert x == ([[0, 5]], [[100, 5]]), x
