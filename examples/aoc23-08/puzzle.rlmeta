actor Puzzle =
    | "Args" .:input !. -> put(["File" read(input)])
    | "File" [map:x] !. -> put(x)
    where
        map = dir*:xs '\n\n' node*:ys !. -> dict():nodes -> ys -> ["Map" xs nodes]
        dir = 'R' | 'L'
        node = name:x ' = (' name:y ', ' name:z ')\n'
            -> dictSet(nodes x dict([["L" y] ["R" z]]))
        name = .:x .:y .:z -> { x y z }

def dictSet d key value =
    d[key] = value

actor PrepareSolver1 =
    "Map" .:directions .:nodes !.
        -> put(["Result" solve(directions nodes)])

def solve directions nodes =
    node = "AAA"
    steps = 0
    index = 0
    while node != "ZZZ":
        node = nodes[node][directions[index]]
        steps += 1
        index = (index + 1) % len(directions)
    return steps

actor PrepareSolver2 =
    "Map" .:directions .:nodes !.
        -> put(["Result" solve2(directions nodes)])

def solve2 directions nodes =
    things = []
    for node in nodes.keys():
        if node.endswith("A"):
            things.append((0, 0, node, {}))
    things = [
        stepToNextSolution(steps, index, node, cache, nodes, directions)
        for steps, index, node, cache
        in things
    ]
    while True:
        step_set = set(x[0] for x in things)
        import sys
        #sys.stderr.write(f"set = {step_set}\n")
        if len(step_set) == 1:
            return things[0][0]
        things = [
            stepToNextSolution(steps, index, node, cache, nodes, directions) if steps < max(step_set)
            else (steps, index, node, cache)
            for steps, index, node, cache in things
        ]

def stepToNextSolution steps index node cache nodes directions =
    key = (index, node)
    if key not in cache:
        steps_increment = 0
        while True:
            node = nodes[node][directions[index]]
            steps_increment += 1
            index = (index + 1) % len(directions)
            if node.endswith("Z"):
                cache[key] = (steps_increment, index, node)
                break
        import sys
        sys.stderr.write(f"Miss {key} -> {cache[key]}\n")
    steps_increment, index, node = cache[key]
    return (steps+steps_increment, index, node, cache)
