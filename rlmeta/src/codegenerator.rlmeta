actor CodeGenerator =
    "Optimized" .:p [asts:x] -> put(["Part" p x])
    where
        asts          = ast*:xs !.                 -> { xs                                         }
        ast           = [%:x !.]                   -> x
        Native        = .:x .:y                    -> { y "natives[" repr(x) "] = " x "\n" }
        Universe      = .:x [astList:xs] [ast*:ys] -> Counter():nextid
                                                   -> x:name
                                                   -> { ys "natives[" repr(name) "] = lambda: [" xs "]\n" }
        Example       = ast:x ast:y                -> { "class " name "_Example_" nextid() "(Example):\n" indent({
                                                          "def test_example(self):\n" indent({
                                                            "self.check_example(natives[" repr(name) "](), " x ", " y ")\n"
                                                          })
                                                        })
                                                      }
        GlobalExpr    = ast:x                      -> { "SemanticAction({}, lambda self: " x ").eval(Runtime(None, natives))" }
        Actor         = .:x [asts:ys] ast*:zs      -> Counter():nextid                                   ->
                                                      collector():matchers                               ->
                                                      collector():rules                                  ->
                                                      collector():param                                  ->
                                                      collector():init                                   ->
                                                      x:name                                             ->
                                                      { ys zs
                                                        "class " x ":\n" indent({
                                                          "def __init__(self" {param} "):\n" indent({
                                                            "self._state = {"init"}\n"
                                                            "self._rules = {\n" indent({ rules }) "}\n"
                                                            "self._main = self._rules.pop('_main')\n"
                                                           })
                                                          "def run(self, stream):\n" indent({
                                                            "return self._main(stream)\n"
                                                           })
                                                          matchers
                                                        })
                                                        "natives[" repr(x) "] = " x "\n"
                                                      }
        Field         = .:x                        -> param({", " x})
                                                   -> init({ repr(x) ": " x ",\n" })
                                                   -> ""
        Rule          = .:x ast:y                  -> rules({repr(x) ": " y ",\n"})
                                                   -> ""
        Or            = matcher:m astList:x        -> { "stream.operator_or([" x "])"              }:body -> m
        Scope         = matcher:m ast:x            -> { "stream.with_scope(" x ")"                 }:body -> m
        And           = matcher:m astList:x        -> { "stream.operator_and([" x "])"             }:body -> m
        Bind          = matcher:m repr:x ast:y     -> { "stream.bind(" x ", " y "(stream))"        }:body -> m
        Star          = matcher:m ast:x            -> { "stream.operator_star(" x ")"              }:body -> m
        Not           = matcher:m ast:x            -> { "stream.operator_not(" x ")"               }:body -> m
        MatchCallRule = matcher:m                  -> { "stream.match_call_rule(self._rules)"      }:body -> m
        MatchRule     = matcher:m .:x              -> { "self._rules['" x "'](stream)"             }:body -> m
        MatchObject   = matcher:m ast:x            -> { "stream.match(lambda item: " x ")"         }:body -> m
        MatchList     = matcher:m ast:x            -> { "stream.match_list(" x ")"                 }:body -> m
        Action        = matcher:m ast:x            -> { "stream.action(lambda self: " x ")"        }:body -> m
        Any           =                            -> { "True"             ", 'any'"               }
        State         = repr:x                     -> { "item == self._state[" x "], 'state'"      }
        Eq            = repr:x                     -> { "item == " x       ", " repr(x)            }
        Range         = repr:x repr:y              -> { x " <= item <= " y ", \"" x "-" y "\""     }
        Set           = repr:x ast:y ast:z         -> { "self.bind(" x ", " y ", lambda: " z ")"   }
        String        = repr
        Number        = repr
        List          = astList:x                  -> { "self.lookup('concat')([" x "])"           }
        ListItem      = repr:x ast:y               -> { "self.lookup('splice')(" x ", " y ")"      }
        Format        = astList:x                  -> { "self.lookup('join')([" x "])"             }
        Call          = ast:x astList:y            -> { x "(" y ")"                                }
        Get           = ast:x repr:y               -> { x "[" y "]"                                }
        Lookup        = repr:x                     -> { "self.lookup(" x ")"                       }
        astList       = ast*:xs                    -> { "\n" indent(join(xs ",\n")) "\n"           }
        matcher       =                            -> { "_matcher_" nextid()                       }:id ->
                                                      matchers({ "def " id "(self, stream):\n" indent({
                                                          "return " body "\n"
                                                        })
                                                      })                                                ->
                                                      { "self." id }
        repr          = .:x                        -> repr(x)
