universe Part1 =
    CLI()
    Parser()
    ShortestPathFinder()
    examples
        ["Args" "example.txt"] -> [["Result" 102]]

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [map:x] !. -> put(x)
    where
        map   = row*:xs !.     -> ["Map" countColumns(xs) len(xs) xs]
        row   = digit*:xs '\n' -> xs
        digit = '1'-'9':x      -> int(x)
    examples
        ["File" "123\n456\n"] -> [
            ["Map"
                3
                2
                [
                    [1 2 3]
                    [4 5 6]
                ]
            ]
        ]

def countColumns rows =
    columns = [len(x) for x in rows]
    assert len(set(columns))
    return columns[0]

actor ShortestPathFinder =
    "Map" .:width .:height .:map -> put(["Result" astar(
        tuple(0 0 "-")
        tuple(dec(width) dec(height) "-")
        map
    )])
    examples
        ["Map" 3 1 [
            [1 2 1]
        ]] -> [["Result" 3]]
        ["Map" 5 1 [
            [1 1 1 1 1]
        ]] -> [["Result" "no path found"]]
        ["Map" 5 2 [
            [1 1 1 1 1]
            [1 1 1 1 1]
        ]] -> [["Result" 5]]
        ["Map" 3 2 [
            [1 9 8]
            [1 1 1]
        ]] -> [["Result" 3]]
        ["Map" 3 3 [
            [1 1 9]
            [9 1 5]
            [9 6 1]
        ]] -> [["Result" 8]]

def astar start goal map =
    estimates = {start: ideal(start, goal)}
    cost = {start: 0}
    cameFrom = {}
    openSet = [start]
    while openSet:
        openSet = sorted(openSet, key=lambda x: estimates[x])
        next = openSet.pop(0)
        x, y, _ = next
        if next[:2] == goal[:2]:
            return cost[next]
        for neighbour in findNeighbours(next, map, cameFrom):
            xN, yN, _ = neighbour
            neighbourCost = cost[next] + map[yN][xN]
            if neighbour not in cost or neighbourCost < cost[neighbour]:
                cameFrom[neighbour] = next
                cost[neighbour] = neighbourCost
                estimates[neighbour] = neighbourCost + ideal(neighbour, goal)
                if neighbour not in openSet:
                    openSet.append(neighbour)
    return "no path found"

actor NeighbourFinder =
    "FindNeighbour" .:pos .:map .:cameFrom
        -> put(findNeighbours(pos map cameFrom))
    examples
        ["FindNeighbour"
            tuple(3 0 "right")
            [
                [1 1 1 1 1]
                [1 1 1 1 1]
            ]
            dict([
                tuple(tuple(3 0 "right") tuple(2 0 "right"))
            ])
        ] -> [[
            tuple(3 1 "down")
            tuple(4 0 "right")
        ]]

def findNeighbours node map cameFrom =
    x, y, _ = node
    up = (x, y-1, "up")
    down = (x, y+1, "down")
    left = (x-1, y, "left")
    right = (x+1, y, "right")
    candidates = [up, down, left, right]
    path = reconstruct(node, cameFrom)
    repeatedDir = None
    if len(path) >= 3:
        dirs = [dir for _, _, dir in path[-3:]]
        if len(set(dirs)) == 1:
            repeatedDir = dirs[0]
    if repeatedDir in ["up", "down"]:
        candidates.remove(up)
        candidates.remove(down)
    if repeatedDir in ["left", "right"]:
        candidates.remove(left)
        candidates.remove(right)
    for candidate in list(candidates):
        xc, yc, _ = candidate
        if xc < 0 or yc < 0 or cameFrom.get(node, (None, None, None))[:2] == candidate[:2]:
            candidates.remove(candidate)
        else:
            try:
                map[yc][xc]
            except IndexError:
                candidates.remove(candidate)
    return candidates

def reconstruct node cameFrom =
    path = [node]
    while node in cameFrom:
        node = cameFrom[node]
        path.insert(0, node)
    return path

def ideal start end =
    x1, y1, inDir1 = start
    x2, y2, inDir2 = end
    return abs(x1-x2) + abs(y1-y2)
