universe Part1 =
    CLI()
    Parser()
    SimplePlan()
    Digger()
    PolygonMaker()
    HoleCounter()
    examples
        ["Args" "example.txt"] -> [["Result" 62]]
        ["Args" "input.txt"] -> [["Result" 52231]]

universe Part2 =
    CLI()
    Parser()
    ComplexPlan()
    Digger()
    PolygonMaker()
    HoleCounter()
    examples
        ["Args" "example.txt"] -> [["Result" 952408144115]]
        ["Args" "input.txt"] -> [["Result" 57196493937398]]

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [plan:x] !. -> put(x)
    where
        plan        = instruction*:xs !.   -> ["RawPlan" ~xs]
        instruction =
            direction:d ' '
            number:n ' '
            color:c '\n'
                -> [d n c]
        direction   = 'U' | 'D' | 'L' | 'R'
        number      = digit:x digit*:xs    -> int({ x xs })
        digit       = '0'-'9':x            -> int(x)
        color       = '(' (!')' .)*:xs ')' -> { xs }
    examples
        ["File" "R 9 (#066240)\nU 6 (#113213)\n"] -> [
            ["RawPlan"
                ["R" 9 "#066240"]
                ["U" 6 "#113213"]
            ]
        ]

actor SimplePlan =
    "RawPlan" instruction*:xs !. -> put(["Plan" ~xs])
    where
        instruction = [.:x .:y] -> [x y]

actor ComplexPlan =
    "RawPlan" instruction*:xs !. -> put(["Plan" ~xs])
    where
        instruction = [. . [complex:x]] -> x
        complex = '#' .:x1 .:x2 .:x3 .:x4 .:x5 dir:y !. ->
            [y int({x1 x2 x3 x4 x5} 16)]
        dir =
            | '0' -> "R"
            | '1' -> "D"
            | '2' -> "L"
            | '3' -> "U"
    examples
        ["RawPlan"
            ["R" 9 "#70c710"]
            ["U" 6 "#0dc571"]
        ] -> [["Plan"
            ["R" 461937]
            ["D" 56407]
        ]]

actor Digger =
    "Plan" start:dir instruction*:ys !.
        -> pos(dir 0 0):pos
        -> render(move(pos 1)):startPos
        -> put(["Path" dir ~~ys])
    where
        start =
            | peekU -> 0
            | peekR -> 1
            | peekD -> 2
            | peekL -> 3
        instruction =
            | moveAndTurnLeft:n  -> moveAndTurn(pos n "left")
            | moveAndTurnRight:n -> moveAndTurn(pos n "right")
            | [. .:n] !.         -> connectLoop(pos n startPos)
            | [. .:n]            -> moveAndTurn(pos n "-")
        moveAndTurnLeft =
            | ["U" .:n] peekL -> n
            | ["R" .:n] peekU -> n
            | ["D" .:n] peekR -> n
            | ["L" .:n] peekD -> n
        moveAndTurnRight =
            | ["U" .:n] peekR -> n
            | ["R" .:n] peekD -> n
            | ["D" .:n] peekL -> n
            | ["L" .:n] peekU -> n
        peekU = !(!(["U"]))
        peekD = !(!(["D"]))
        peekL = !(!(["L"]))
        peekR = !(!(["R"]))
    examples
        ["Plan"
            // X>>
            // ^ V
            // <<V
            ["R" 2]
            ["D" 2]
            ["L" 2]
            ["U" 2]
        ] -> [["Path"
            1
            2 "right"
            2 "right"
            2 "right"
            2 "right"
        ]]
        ["Plan"
            // X^
            // V>
            ["D" 1]
            ["R" 1]
            ["U" 1]
            ["L" 1]
        ] -> [["Path"
            2
            1 "left"
            1 "left"
            1 "left"
            1 "left"
        ]]

def pos dir x y =
    return {"dir": dir, "x": x, "y": y, "trail": []}

def moveAndTurn pos n dir =
    new = turn(move(pos, n), dir)
    pos["trail"].append((pos["x"], pos["y"]))
    pos["dir"] = new["dir"]
    pos["x"] = new["x"]
    pos["y"] = new["y"]
    return [n, dir]

def trail pos =
    return pos["trail"]+[(pos["x"], pos["y"])]

def move pos n =
    dx, dy = [
        (0, -1),
        (1, 0),
        (0, 1),
        (-1, 0),
    ][pos["dir"]]
    return dict(pos, x=pos["x"]+dx*n, y=pos["y"]+dy*n)

def render pos =
    return (pos["x"], pos["y"])

def turn pos dir =
    if dir == "left":
        return dict(pos, dir=(pos["dir"] + 3) % 4)
    elif dir == "right":
        return dict(pos, dir=turnRight(pos["dir"]))
    else:
        return pos

def turnRight dir =
    return (dir + 1) % 4

def connectLoop pos n startPos =
    result = []
    moved = move(pos, n)
    for dir in ["-", "left", "right"]:
        if render(move(turn(moved, dir), 1)) == startPos:
            result.extend(moveAndTurn(pos, n, dir))
            break
    else:
        raise ValueError(f"did not connect back to start: {pos} {moved}")
    return result

actor PolygonMaker =
    "Path" .:dir instruction*:xs !.
        -> startPosition(dir):left
        -> startPosition(turnRight(dir)):right
        -> xs
        -> put(["Polygons" trail(left) trail(right)])
    where
        instruction =
            | .:n "left"  -> moveAndTurnLeftLeft(left n)
                          -> moveAndTurnLeftRight(right n)
            | .:n "right" -> moveAndTurnRightLeft(left n)
                          -> moveAndTurnRightRight(right n)
            | .:n "-"     -> moveAndTurn(left n "-")
                          -> moveAndTurn(right n "-")

def startPosition dir =
    return [
        pos(dir, 0, 0),
        pos(dir, 1, 0),
        pos(dir, 1, 1),
        pos(dir, 0, 1),
    ][dir]

def moveAndTurnLeftLeft pos n =
    moveAndTurn(pos, n-1, "left")

def moveAndTurnLeftRight pos n =
    moveAndTurn(pos, n, "left")
    moveAndTurn(pos, 1, "-")

def moveAndTurnRightLeft pos n =
    moveAndTurn(pos, n, "right")
    moveAndTurn(pos, 1, "-")

def moveAndTurnRightRight pos n =
    moveAndTurn(pos, n-1, "right")

def mymax xs =
    return max(xs)

actor HoleCounter =
    | "Polygons" polygon*:xs !. -> put(["Result" mymax(xs)])
    | "Polygon" .*:xs !. -> put(["Result" polygonArea(xs)])
    where
        polygon = .:x -> polygonArea(x)
    examples
        ["Polygon"
            tuple(0 0) tuple(1 0)
                       tuple(1 1)
            tuple(0 1)
        ] -> [["Result" 1]]
        ["Polygon"
            tuple(0 0) tuple(1 0)
        ] -> [["Result" 0]]

def polygonArea points =
    loop = points + [points[-1]]
    area = 0
    for i in range(len(loop)-1):
        x1, y1 = loop[i]
        x2, y2 = loop[i+1]
        area += x1*y2
        area -= x2*y1
    assert area % 2 == 0
    return int(area / 2)
