actor CLI =
    run = "Args" .:input !. -> put(["File" read(input)])

actor RecordParser =
    run = "File" [races:xs] !. -> put(["Records" ~xs])
    races =
        'Time:' ^number*:xs ^'\n'
        'Distance:' ^number*:ys ^'\n'
        !. -> zip("Record" xs ys)
    number = digit:x digit*:xs -> int({x xs})
    digit = '0'-'9'
    space = ' '*

actor RecordParserBetterKerning =
    run = "File" [races:xs] !. -> put(["Records" ~xs])
    races =
        'Time:' ^number*:xs ^'\n'
        'Distance:' ^number*:ys ^'\n'
        !. -> zip("Record" xs ys)
    number = ^digit:x ^digit*:xs -> int({x xs})
    digit = '0'-'9'
    space = ' '*

actor MarginCalculator =
    run = "Records" record*:xs !. -> put(["Margins" ~xs])
    record = ["Record" .:time .:distance !.] -> margin(time distance)

actor MarginProduct =
    run = "Margins" product:x !. -> put(["Result" x])
    product =
        | .:x !. -> x
        | .:x product:y -> mul(x y)

def zip(name, xs, ys):
    assert len(xs) == len(ys)
    result = []
    for i, x in enumerate(xs):
        result.append([name, x, ys[i]])
    return result

def margin(time, distance):
    margin = 0
    for ms in range(time):
        if (time-ms)*ms > distance:
            margin += 1
    return margin
