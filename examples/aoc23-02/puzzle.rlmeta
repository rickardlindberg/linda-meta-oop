actor Main = "Args" -> selftest()

universe Part1 =
    CLI()
    GameParser()
    GameMaxer()
    GameFilterer()
    FilterSummary()
    examples
        ["Args" "example1.txt"] -> [["Result" 8]]
        ["Args" "input1.txt"] -> [["Result" 2416]]

universe Part2 =
    CLI()
    GameParser()
    GameMaxer()
    GamePower()
    FilterSummary()
    examples
        ["Args" "example1.txt"] -> [["Result" 2286]]
        ["Args" "input1.txt"] -> [["Result" 63307]]

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor GameParser =
    "File" [games:xs] !. -> put(["Games" ~xs])
    where
        games   = game*:xs !.                           -> xs
        game    = 'Game ' number:x ': ' subsets:xs '\n' -> ["Game" x ~xs]
        subsets = subset:x ('; ' subset)*:xs            -> [x ~xs]
        subset  = hand:x (', ' hand)*:xs                -> ["Subset" x ~xs]
        hand    = number:x ' ' color:y                  -> ["Cubes" x y]
        color   =
            | 'red'   -> "red"
            | 'green' -> "green"
            | 'blue'  -> "blue"
        number  = '1'-'9':x '0'-'9'*:xs                 -> int({x xs})
    examples
        ["File" "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\n"] -> [
            ["Games"
                ["Game" 1
                    ["Subset" ["Cubes" 3 "blue"] ["Cubes" 4 "red"]]
                    ["Subset" ["Cubes" 1 "red"] ["Cubes" 2 "green"] ["Cubes" 6 "blue"]]
                    ["Subset" ["Cubes" 2 "green"]]]
            ]
        ]

actor GameMaxer =
    "Games" game*:xs !. -> put(["MaxedGames" ~xs])
    where
        game   = ["Game" .:id subset*:xs !.] -> collectDictList([~~xs]):result
                                             -> ["Game" id
                                                    max(result.red)
                                                    max(result.green)
                                                    max(result.blue)
                                                ]
        subset = ["Subset" cubes*:xs !.]     -> xs
        cubes  = ["Cubes" .:n .:color !.]    -> tuple(color n)
    examples
        ["Games"
            ["Game" 1
                ["Subset" ["Cubes" 3 "blue"] ["Cubes" 4 "red"]]
                ["Subset" ["Cubes" 1 "red"] ["Cubes" 2 "green"] ["Cubes" 6 "blue"]]
                ["Subset" ["Cubes" 2 "green"]]]
        ] -> [
            ["MaxedGames"
                ["Game" 1 4 2 6]
            ]
        ]

actor GameFilterer =
    "MaxedGames" game*:xs -> put(["FilteredGames" ~~xs])
    where
        game =
            | ["Game" .:id 0-12 0-13 0-14 !.] -> [id]
            | ["Game" .    .    .    .    !.] -> []
    examples
        ["MaxedGames"
            ["Game" 1 4 2 6]
            ["Game" 2 4 2 22]
        ] -> [
            ["FilteredGames" 1]
        ]

actor GamePower =
    "MaxedGames" game*:xs -> put(["FilteredGames" ~xs])
    where
        game = ["Game" .:id .:r .:g .:b !.] -> mul(r mul(g b))

actor FilterSummary =
    "FilteredGames" .*:xs -> put(["Result" sum(xs)])

def mul x y =
    return x*y
