actor Main = "Args" -> selftest()

universe Part1 =
    Reader()
    Parser()
    Augmenter()
    Compiler()
    PulseCounter()
    Summer()
    examples
        ["Read" "example.txt"] -> [["Result" 32000000]]
        ["Read" "example2.txt"] -> [["Result" 11687500]]
        ["Read" "input.txt"] -> [["Result" 856482136]]

universe Grapher =
    Reader()
    Parser()
    Graphviz()
    Writer()
    examples
        ["Read" "input.txt"] -> []

actor Reader =
    "Read" .:input !. -> put(["File" read(input)])

actor Writer =
    "Write" .:path .:input !. -> write(path input)

def write path text =
    with open(path, "w") as f:
        f.write(text)

actor Parser =
    "File" [config:x !.] !. -> put(x)
    where
        config  = module*:xs             -> ["Configuration" ~xs]
        module  = type:t name:x ' -> '
                  targets:xs '\n'        -> [t x xs]
        targets = name:x (', ' name)*:xs -> [x ~xs]
        name    = char:x char*:xs        -> { x xs }
        char    = 'a'-'z'
        type    =
            | '%' -> "FlipFlop"
            | '&' -> "Conjunction"
            |     -> "Module"
    examples
        ["File" {
            "broadcaster -> a, b, c\n"
            "%a -> b\n"
            "%b -> c\n"
            "%c -> inv\n"
            "&inv -> a\n"
        }] -> [["Configuration"
            ["Module" "broadcaster" ["a" "b" "c"]]
            ["FlipFlop" "a" ["b"]]
            ["FlipFlop" "b" ["c"]]
            ["FlipFlop" "c" ["inv"]]
            ["Conjunction" "inv" ["a"]]
        ]]

actor Graphviz =
    "Configuration" module*:xs !. -> put(["Write" "graph.dot" {
        "digraph {\n" indent({ xs }) "\n}"
    }])
    where
        module =
            | ["Module" .:name outs:outs]
                -> name:name
                -> { name " [color=green]\n" outs }
            | ["FlipFlop" .:name outs:outs]
                -> name:name
                -> { name " [color=orange]\n" outs }
            | ["Conjunction" .:name outs:outs]
                -> name:name
                -> { name " [color=red]\n" outs }
        outs = [out*:xs !.] -> xs
        out = .:x -> { name " -> " x "\n" }

actor Augmenter =
    "Configuration" module*:xs
        -> dict():ins
        -> []:present
        -> []:empties
        -> put(["Program" ~xs ~generateEmpties(present empties ins)])
    where
        module = [.:type .:name [out*:outs]]
            -> append(present name)
            -> name:fromName
            -> [type name readIn(ins name) outs]
        out = .:toName
            -> append(empties toName)
            -> registerTransition(ins fromName toName)
            -> toName
    examples
        ["Configuration"
            ["Module" "broadcaster" ["a" "b"]]
            ["FlipFlop" "a" ["b"]]
            ["FlipFlop" "b" ["inv"]]
            ["Conjunction" "inv" ["a"]]
        ] -> [
            ["Program"
                ["Module"      "broadcaster" []                    ["a" "b"]]
                ["FlipFlop"    "a"           ["broadcaster" "inv"] ["b"]]
                ["FlipFlop"    "b"           ["broadcaster" "a"]   ["inv"]]
                ["Conjunction" "inv"         ["b"]                 ["a"]]
            ]
        ]
        ["Configuration"
            ["Module" "broadcaster" ["a" "b"]]
            ["FlipFlop" "a" ["b"]]
        ] -> [
            ["Program"
                ["Module"   "broadcaster" []                  ["a" "b"]]
                ["FlipFlop" "a"           ["broadcaster"]     ["b"]]
                ["Empty"    "b"           ["broadcaster" "a"] []]
            ]
        ]

actor Compiler =
    "Program" module*:xs !.
        -> dict():state
        -> dict():modules
        -> xs
        -> put(["Compiled" modules state])
    where
        module =
            | ["Module"      .:name .:ins .:outs]
                -> dictSet(modules name evalModule(name outs))
            | ["FlipFlop"    .:name .:ins .:outs]
                -> dictSet(state name "off")
                -> dictSet(modules name evalFlipFlop(name outs))
            | ["Conjunction" .:name [in*:ins] .:outs]
                -> name:name
                -> dictSet(modules name evalConjunction(name ins outs))
            | ["Empty"       .:name .:ins .:outs]
                -> dictSet(modules name evalEmpty())
        in = .:x
            -> dictSet(state tuple(name x) "low")
            -> tuple(name x)

actor PulseCounter =
    "Compiled" .:modules .:state -> put(["Pulses" ~countPulses(modules state)])

actor Summer =
    "Pulses" .:low .:high -> put(["Result" mul(low high)])

def countPulses modules state =
    lowCount = 0
    highCount = 0
    for i in range(1000):
        pulses = [("-", "low", "broadcaster")]
        while pulses:
            source, pulse, destination = pulses.pop(0)
            if pulse == "low":
                lowCount += 1
            else:
                highCount += 1
            modules[destination](pulse, source, state, pulses)
    return [lowCount, highCount]

def evalModule name outs =
    def eval(pulse, source, state, pulses):
        for out in outs:
            pulses.append((name, pulse, out))
    return eval

def evalFlipFlop name outs =
    def eval(pulse, source, state, pulses):
        if pulse == "low":
            if state[name] == "on":
                newPulse = "low"
                state[name] = "off"
            else:
                assert state[name] == "off"
                newPulse = "high"
                state[name] = "on"
            for out in outs:
                pulses.append((name, newPulse, out))
    return eval

def evalConjunction name ins outs =
    def eval(pulse, source, state, pulses):
        state[(name, source)] = pulse
        if set(state[x] for x in ins) == {"high"}:
            newPulse = "low"
        else:
            newPulse = "high"
        for out in outs:
            pulses.append((name, newPulse, out))
    return eval

def evalEmpty =
    def eval(pulse, source, state, pulses):
        pass
    return eval

def dictSet dict name value =
    dict[name] = value

def generateEmpties present empties ins =
    return [
        ["Empty", x, readIn(ins, x), []]
        for x in set(empties) if x not in present
    ]

def append list item =
    list.append(item)

def mul x y =
    return x * y

def readIn ins name =
    if name not in ins:
        ins[name] = []
    return ins[name]

def registerTransition ins fromName toName =
    if toName not in ins:
        ins[toName] = []
    ins[toName].append(fromName)
