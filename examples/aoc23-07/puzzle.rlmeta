actor Main = "Args" -> selftest()

universe Partial =
    CLI()
    HandParser()
    CardRanker()
    CardSorter()
    examples
        ["Args" "example.txt"] -> [["SortedHands"
            ["RankedHand" 765 1 3 2 10 3 13]
            ["RankedHand" 220 2 13 10 11 11 10]
            ["RankedHand" 28 2 13 13 6 7 7]
            ["RankedHand" 684 3 10 5 5 11 5]
            ["RankedHand" 483 3 12 12 12 11 14]
        ]]

universe Part1 =
    CLI()
    HandParser()
    CardRanker()
    CardSorter()
    CalculateWinnings()
    examples
        ["Args" "example.txt"] -> [["Result" 6440]]
        ["Args" "input.txt"] -> [["Result" 253910319]]

universe Part2 =
    CLI()
    HandParser()
    CardRankerJoker()
    CardSorter()
    CalculateWinnings()
    examples
        ["Args" "example.txt"] -> [["Result" 5905]]
        ["Args" "input.txt"] -> [["Result" 254083736]]

def mul x y =
    return x*y

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor HandParser =
    "File" [hand*:xs !.] !. -> put(["Hands" ~xs])
    where
        hand = card*:xs ^number:y '\n' -> ["Card" y ~xs]
        card =
            | 'A'
            | 'K'
            | 'Q'
            | 'J'
            | 'T'
            | '2'-'9'
        number = digit:x digit*:xs -> int({x xs})
        digit = '0'-'9'
        space = ' '*

actor CardRanker =
    "Hands" rank*:xs !. -> put(["RankedHands" ~xs])
    where
        rank = ["Card" .:bid rankCard*:xs !.] -> ["RankedHand" bid totalRank(xs) ~xs]
        rankCard =
            | "A"       -> 14
            | "K"       -> 13
            | "Q"       -> 12
            | "J"       -> 11
            | "T"       -> 10
            | '2'-'9':x -> int(x)

def totalRank cards =
    map = {}
    for x in cards:
        if x not in map:
            map[x] = 1
        else:
            map[x] += 1
    buckets = sorted(map.values())
    if buckets == [5]:
        return 6
    elif buckets == [1, 4]:
        return 5
    elif buckets == [2, 3]:
        return 4
    elif buckets == [1, 1, 3]:
        return 3
    elif buckets == [1, 2, 2]:
        return 2
    elif buckets == [1, 1, 1, 2]:
        return 1
    else:
        assert buckets == [1, 1, 1, 1, 1], buckets
        return 0

actor CardRankerJoker =
    "Hands" rank*:xs !. -> put(["RankedHands" ~xs])
    where
        rank = ["Card" .:bid rankCard*:xs !.] -> ["RankedHand" bid totalRankJoker(xs) ~xs]
        rankCard =
            | "A"       -> 13
            | "K"       -> 12
            | "Q"       -> 11
            | "T"       -> 10
            | '2'-'9':x -> int(x)
            | "J"       -> 1

def totalRankJoker cards =
    map = {}
    joker_count = 0
    for x in cards:
        if x == 1:
            joker_count += 1
        else:
            if x not in map:
                map[x] = 1
            else:
                map[x] += 1
    if joker_count == 5:
        buckets = [5]
    else:
        max_key = max(map.items(), key=lambda x: x[1])[0]
        map[max_key] += joker_count
        buckets = sorted(map.values())
    if buckets == [5]:
        return 6
    elif buckets == [1, 4]:
        return 5
    elif buckets == [2, 3]:
        return 4
    elif buckets == [1, 1, 3]:
        return 3
    elif buckets == [1, 2, 2]:
        return 2
    elif buckets == [1, 1, 1, 2]:
        return 1
    else:
        assert buckets == [1, 1, 1, 1, 1], buckets
        return 0

actor CardSorter =
    "RankedHands" .*:xs !. -> put(["SortedHands" ~sortHands(xs)])

def sortHands hands =
    return sorted(hands, key=lambda hand: hand[2:])

actor CalculateWinnings =
    "SortedHands" hand*:xs !.
        -> Counter():rank
        -> rank()
        -> put(["Result" sum(xs)])
    where
        hand = ["RankedHand" .:bid]
            -> mul(rank() bid)
