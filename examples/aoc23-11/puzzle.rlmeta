actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [universe:x] !. -> put(x)
    where
        universe   = row*:xs !.   -> Counter():nextPosY
                                  -> ["Universe" ~~~xs]
        row        = col*:xs '\n' -> Counter():nextPosX
                                  -> nextPosY():posY
                                  -> xs
        col        = shape:z      -> nextPosX():posX
                                  -> z
        shape =
            | '#' -> [pos(posX posY)]
            | '.' -> []

def pos x y =
    return (x, y)

actor Expander #by =
    "Universe" .*:xs !. -> put(["ExpandedUniverse" ~expand(xs by)])

def expand galaxies by =
    xs, ys = findExpansionXY(galaxies)
    offset = 0
    for expandX in xs:
        galaxies = [
            (x+by, y) if x > offset+expandX else (x, y)
            for (x, y) in galaxies
        ]
        offset += by
    offset = 0
    for expandY in ys:
        galaxies = [
            (x, y+by) if y > offset+expandY else (x, y)
            for (x, y) in galaxies
        ]
        offset += by
    return galaxies

def findExpansionXY galaxies =
    xs = set()
    ys = set()
    for x, y in galaxies:
        xs.add(x)
        ys.add(y)
    expandXs = []
    for x in range(max(xs)):
        if x not in xs:
            expandXs.append(x)
    expandYs = []
    for y in range(max(ys)):
        if y not in ys:
            expandYs.append(y)
    return (expandXs, expandYs)

actor Pairer =
    "ExpandedUniverse" .*:xs !. -> put(["Pairs" ~pairs(xs)])

def pairs items =
    pairs = []
    remaining = list(items)
    while remaining:
        first = remaining.pop(0)
        for second in remaining:
            pairs.append((first, second))
    return pairs

actor ShortestPathSummer =
    "Pairs" shortPair*:xs !. -> put(["Result" sum(xs)])
    where
        shortPair = [[.:x1 .:y1] [.:x2 .:y2]]
            -> add(abs(sub(x1 x2)) abs(sub(y1 y2)))
