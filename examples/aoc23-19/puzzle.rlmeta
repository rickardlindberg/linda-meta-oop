universe Part1 =
    CLI()
    Parser()
    //examples
    //    ["Args" "example.txt"] -> []
    //    ["Args" "input.txt"] -> []

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [program:x] !. -> put(x)
    where
        program   = workflow*:xs '\n' part*:ys             -> ["Program" ~xs ~ys]
        workflow  = name:x '{' rule:y (',' rule)*:ys '}\n' -> ["Workflow" x y ~ys]
        rule =
            | condition:c action:a                         -> ["Rule" c a]
            | action:a                                     -> ["Rule" a]
        condition = category:c ('<' | '>'):a number:b ':'  -> [c a b]
        part      = '{x=' number:x ',m=' number:m
                    ',a=' number:a ',s=' number:s '}\n'    -> ["Part" x m a s]
        category =
            | 'x'
            | 'm'
            | 'a'
            | 's'
        action    = 'A' | 'R' | name
        number    = digit:x digit*:xs                      -> int({ x xs })
        digit     = '0'-'9'
        name      = nameChar:x nameChar*:xs -> { x xs }
        nameChar  = 'a'-'z'
    examples
        ["File" "px{a<2006:qkq,m>2090:A,rfg}\n\n{x=787,m=2655,a=1222,s=2876}\n"] -> [
            ["Program"
                ["Workflow"
                    "px"
                    ["Rule"
                        ["a" "<" 2006]
                        "qkq"
                    ]
                    ["Rule"
                        ["m" ">" 2090]
                        "A"
                    ]
                    ["Rule"
                        "rfg"
                    ]
                ]
                ["Part" 787 2655 1222 2876]
            ]
        ]

actor Analyzer =
    | "Program" part*:xs !.
        -> xs
        -> put(["Analyze" ["Left" startState()] ["Done"]])
    | "Analyze" ["Left" !.] ["Done" .*:xs]
        -> put(["Or" ~xs])
    where
        part =
            | ["Workflow" .:name rule*:xs !.]
                -> name:name
                -> Counter():ruleNumber
                -> xs
            | .
        rule =
            | ["Rule" .:condition .:action]
                -> spawn(RuleEvaluator(name ruleNumber() condition action))
            | ["Rule"             .:action]
                -> spawn(RuleEvaluator(name ruleNumber() 0 action))
    examples
        ["Program"
            ["Workflow"
                "in"
                ["Rule"
                    [1 "<" 2]
                    "qkq"
                ]
                ["Rule"
                    "R"
                ]
            ]
            ["Workflow"
                "qkq"
                ["Rule"
                    "A"
                ]
            ]
            ["Part" 1 2 3 4]
        ] -> [
            ["Analyze"
                ["Left" startState()]
                ["Done"]
            ]
        ]
        ["Analyze"
            ["Left"]
            ["Done" startState()]
        ] -> [["Or" startState()]]

def startState =
    return ["in", 0, {
        "x": [None, None],
        "m": [None, None],
        "a": [None, None],
        "s": [None, None],
    }]

actor RuleEvaluator #workflowName #ruleNumber #condition #action =
    ["Analyze" ["Left" evaluate:x .*:xs] ["Done" .*:ys]]
        -> put(["Analyze" ["Left" ~xs] ["Done" ~ys]])
    where
        evaluate = [#workflowName #ruleNumber .:state] -> "help"
