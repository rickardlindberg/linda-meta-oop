universe Part1 =
    CLI()
    Parser()
    Analyzer()
    //examples
    //    ["Args" "example.txt"] -> []
    //    ["Args" "input.txt"] -> []

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [program:x] !. -> put(x)
    where
        program   = workflow*:xs '\n' part*:ys             -> ["Program" ~xs ~ys]
        workflow  = name:x '{' rule:y (',' rule)*:ys '}\n' -> ["Workflow" x y ~ys]
        rule =
            | condition:c action:a                         -> ["Rule" a c]
            | action:a                                     -> ["Rule" a]
        condition = category:c ('<' | '>'):a number:b ':'  -> [c a b]
        part      = '{x=' number:x ',m=' number:m
                    ',a=' number:a ',s=' number:s '}\n'    -> ["Part" dict([
                        tuple("x" x)
                        tuple("m" m)
                        tuple("a" a)
                        tuple("s" s)
                    ])]
        category =
            | 'x'
            | 'm'
            | 'a'
            | 's'
        action    = 'A' | 'R' | name
        number    = digit:x digit*:xs                      -> int({ x xs })
        digit     = '0'-'9'
        name      = nameChar:x nameChar*:xs -> { x xs }
        nameChar  = 'a'-'z'
    examples
        ["File" "px{a<2006:qkq,m>2090:A,rfg}\n\n{x=787,m=2655,a=1222,s=2876}\n"] -> [
            ["Program"
                ["Workflow"
                    "px"
                    ["Rule"
                        "qkq"
                        ["a" "<" 2006]
                    ]
                    ["Rule"
                        "A"
                        ["m" ">" 2090]
                    ]
                    ["Rule"
                        "rfg"
                    ]
                ]
                ["Part" dict([
                    tuple("x" 787)
                    tuple("m" 2655)
                    tuple("a" 1222)
                    tuple("s" 2876)
                ])]
            ]
        ]

actor Analyzer =
    | "Program" part*:xs !.
        -> xs
        -> put(["Analyze" ["Left" startState()] ["Done"]])
    | "Analyze" ["Left" !.] ["Done" .*:xs]
        -> put(["Or" ~xs])
    where
        part =
            | ["Workflow" .:name rule*:xs !.]
                -> name:name
                -> Counter():ruleNumber
                -> xs
            | .
        rule =
            | ["Rule" .:action .:condition]
                -> spawn(RuleEvaluator(name ruleNumber() condition action))
            | ["Rule" .:action            ]
                -> spawn(RuleEvaluator(name ruleNumber() 0 action))
    examples
        ["Analyze"
            ["Left"]
            ["Done" startState()]
        ] -> [["Or" startState()]]
        ["Program"
            ["Workflow"
                "in"
                ["Rule" "qkq" ["m" "<" 2]]
                ["Rule" "R"]
            ]
            ["Workflow"
                "qkq"
                ["Rule" "A"]
            ]
            ["Part" 1 2 3 4]
        ] -> [
            ["Or" dict([
                tuple("x" tuple(None None))
                tuple("m" tuple(None 2))
                tuple("a" tuple(None None))
                tuple("s" tuple(None None))
            ])]
        ]

actor RuleEvaluator #workflowName #ruleNumber #condition #action =
    "Analyze" ["Left" evaluate:x .*:xs] ["Done" .*:ys] !.
        -> put(["Analyze" ["Left" ~get(x "left") ~xs] ["Done" ~get(x "done") ~ys]])
    where
        evaluate = [#workflowName #ruleNumber .:state]
            -> eval(workflowName ruleNumber state condition action)

def startState =
    return ["in", 0, {
        "x": (None, None),
        "m": (None, None),
        "a": (None, None),
        "s": (None, None),
    }]

def get dict name =
    return dict[name]

def eval workflowName ruleNumber state condition action =
    left = []
    done = []
    if condition == 0:
        if action == "A":
            done.append(state)
        elif action != "R":
            left.append([action, 0, state])
    else:
        slot, comparison, number = condition
        newCondition = updateCondition(state[slot], comparison, number)
        if isValid(newCondition):
            newState = dict(state, **{slot: newCondition})
            if action == "A":
                done.append(state)
            elif action != "R":
                left.append([action, 0, newState])
        newCondition = updateConditionNegate(state[slot], comparison, number)
        if isValid(newCondition):
            newState = dict(state, **{slot: newCondition})
            left.append([workflowName, ruleNumber+1, newState])
    return {
        "left": left,
        "done": done,
    }

def updateConditionNegate condition comparison number =
    if comparison == "<":
        return updateCondition(condition, ">", number-1)
    elif comparison == ">":
        return updateCondition(condition, "<", number+1)
    else:
        raise ValueError("invalid comparison")

def updateCondition condition comparison number =
    lower, upper = condition
    if comparison == "<":
        if upper is None or upper > number:
            upper = number
    elif comparison == ">":
        if lower is None or lower < number:
            lower = number
    else:
        raise ValueError("invalid comparison")
    return lower, upper

def isValid condition =
    lower, upper = condition
    return lower is None or upper is None or (upper - lower) > 1
