actor Main = "Args" -> selftest()

universe Part1 =
    CLI()
    GridParser()
    EngineParser()
    ExpandAdjecant()
    PartSummer()
    examples
        ["Args" "example1.txt"] -> [["Result" 4361]]
        ["Args" "input1.txt"] -> [["Result" 520019]]

universe Part2 =
    CLI()
    GridParser()
    EngineParser()
    ExpandAdjecant()
    GearSummer()
    examples
        ["Args" "example1.txt"] -> [["Result" 467835]]
        ["Args" "input1.txt"] -> [["Result" 75519888]]

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor GridParser =
    "File" [row*:xs] !. -> Counter():nextRow
                        -> put(["Grid" ~xs])
    where
        row = col*:xs '\n'        -> Counter():nextCol
                                  -> nextRow():row
                                  -> xs
        col = !'\n' .:x           -> [x row nextCol()]
    examples
        ["File" "*\n*.\n"] ->
            [["Grid"
                [["*" 0 0]]
                [["*" 1 0] ["." 1 1]]]]

actor EngineParser =
    "Grid" row*:xs -> []:numbers
                   -> collectDictList([~~xs]):result
                   -> put(["Engine" ["Numbers" ~numbers]
                                    ["Symbols" ~result.symbols]])
    where
        row = [col*:xs !.]   -> [~~xs]
        col = number | symbol | . -> []
        number = digits:x -> []:positions
                          -> append(numbers [x ~positions])
                          -> []
        digits =
            | digit:x digit*:xs -> int({x xs})
        digit =
            | [['0'-'9':x] .:row .:col !.] -> append(positions [row col]) -> x
        symbol =
            | [!"." .:x    .:row .:col !.] -> [tuple("symbols" [x row col])]
    examples
        ["Grid"
            [["1" 0 0]]
            [["*" 1 0] ["." 1 1]]] ->
        [["Engine"
            ["Numbers" [1 [0 0]]]
            ["Symbols" ["*" 1 0]]]]
        ["Grid"
            [["1" 0 0] ["2" 0 1]]] ->
        [["Engine"
            ["Numbers" [12 [0 0] [0 1]]]
            ["Symbols"]]]

def append list thing =
    list.append(thing)

actor ExpandAdjecant =
    "Engine" ["Numbers" number*:xs !.]
             ["Symbols" .*:ys !.]
        -> put(["FlatEngine" ["Numbers" ~xs] ["Symbols" ~ys]])
    where
        number = [.:x positions:xs] -> [x ~xs]
        positions =
            | [.:row .:col] !. ->
                [[sub(row 1) sub(col 1)] [sub(row 1) col] [sub(row 1) add(col 1)]
                 [    row    sub(col 1)]                  [    row    add(col 1)]
                 [add(row 1) sub(col 1)] [add(row 1) col] [add(row 1) add(col 1)]]
            | [.:row .:col] positionsRest:xs ->
                [[sub(row 1) sub(col 1)] [sub(row 1) col]
                 [    row    sub(col 1)]
                 [add(row 1) sub(col 1)] [add(row 1) col] ~xs]
        positionsRest =
            | [.:row .:col] !. ->
                [[sub(row 1) col] [sub(row 1) add(col 1)]
                                  [    row    add(col 1)]
                 [add(row 1) col] [add(row 1) add(col 1)]]
            | [.:row .:col] positionsRest:xs ->
                [[sub(row 1) col]
                 [add(row 1) col] ~xs]
    examples
        ["Engine"
            ["Numbers" [12 [0 0] [0 1]]]
            ["Symbols" ["*" 2 2]]] ->
        [["FlatEngine"
            ["Numbers" [12 [negate(1) negate(1)] [negate(1) 0]
                             [ 0 negate(1)]
                             [ 1 negate(1)] [ 1 0]
                                                [negate(1) 1] [negate(1) 2]
                                                         [ 0 2]
                                                [ 1 1] [ 1 2]]]

            ["Symbols" ["*" 2 2]]]]
        ["Engine"
            ["Numbers" [1 [0 0]]]
            ["Symbols" ["*" 2 2]]] ->
        [["FlatEngine"
            ["Numbers" [1 [negate(1) negate(1)] [negate(1) 0] [negate(1) 1]
                            [ 0 negate(1)]          [ 0 1]
                            [ 1 negate(1)] [ 1 0] [ 1 1]]]
            ["Symbols" ["*" 2 2]]]]
        ["Engine"
            ["Numbers" [123 [0 0] [0 1] [0 2]]]
            ["Symbols" ["*" 2 2]]] ->
        [["FlatEngine"
            ["Numbers" [123 [negate(1) negate(1)] [negate(1) 0]
                              [ 0 negate(1)]
                              [ 1 negate(1)] [ 1 0]
                                                 [negate(1) 1]

                                                 [ 1 1]
                                                          [negate(1) 2] [negate(1) 3]
                                                                   [ 0 3]
                                                          [ 1 2] [ 1 3]]]


            ["Symbols" ["*" 2 2]]]]

def negate x =
    return -x

def sub x y =
    return x - y

def add x y =
    return x + y

actor PartSummer =
    "FlatEngine" ["Numbers" number*:xs !.]
                 ["Symbols" symbol*:ys !.]
        -> ys:symbols
        -> put(["Result" sum(xs)])
    where
        symbol = [. .:row .:col] -> [row col]
        number = [.:x .*:ys] -> countIfOverlap(x ys symbols)

actor GearSummer =
    "FlatEngine" ["Numbers" .*:xs !.]
                 ["Symbols" symbol*:ys !.]
        -> xs:numbers
        -> put(["Result" sum(ys)])
    where
        symbol =
            | ["*" .:row .:col] -> getRatio(row col numbers)
            | .                 -> 0

def countIfOverlap number set1 set2 =
    for x in set1:
        if x in set2:
            return number
    return 0

def getRatio row col numbers =
    x = []
    for number in numbers:
        if [row, col] in number[1:]:
            x.append(number[0])
    if len(x) == 2:
        return x[0] * x[1]
    else:
        return 0
