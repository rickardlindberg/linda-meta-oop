actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [map:x] !. -> put(x)
    where
        map   = row*:xs     -> Counter():nextPosY
                            -> ["Map" ~~xs]
        row   = col*:xs '\n'-> Counter():nextPosX
                            -> nextPosY():posY
                            -> xs
        col   = shape:z     -> nextPosX():posX
                            -> ["Node" posX posY ~z]
        shape =
            | '|' -> [pos(posX decrement(posY)) pos(posX increment(posY))]
            | '-' -> [pos(decrement(posX) posY) pos(increment(posX) posY)]
            | 'L' -> [pos(posX decrement(posY)) pos(increment(posX) posY)]
            | 'J' -> [pos(posX decrement(posY)) pos(decrement(posX) posY)]
            | '7' -> [pos(decrement(posX) posY) pos(posX increment(posY))]
            | 'F' -> [pos(increment(posX) posY) pos(posX increment(posY))]
            | '.' -> []
            | 'S' -> ["START"]

actor Flattener =
    "Map" node*:xs !. -> put(["Grid" dict(xs)])
    where
        node =
            | ["Node" .:x .:y "START" !.] -> [pos(x y) "START"]
            | ["Node" .:x .:y .*:zs   !.] -> [pos(x y) zs]

def pos x y =
    return (x, y)

actor StepMaximizer =
    "Grid" .:grid !. -> put(["Result" maxSteps(grid)])

def maxSteps grid =
    def furthest(id):
        visited = {id}
        nextNodes = grid.get(id, [])
        steps = 0
        while nextNodes:
            steps += 1
            newNextNodes = []
            for nextNode in nextNodes:
                visited.add(nextNode)
                newNextNodes.extend(x for x in grid.get(nextNode, []) if x not in visited)
            nextNodes = newNextNodes
        return steps
    startPos = None
    startEdges = []
    for pos in grid.keys():
        if grid.get(pos) == "START":
            startPos = pos
        else:
            for next in grid.get(pos, []):
                if grid.get(next) == "START":
                    startEdges.append(pos)
    assert startPos is not None
    assert len(startEdges) == 2
    grid[startPos] = startEdges
    return furthest(startPos)

actor TileCounter =
    "Grid" .:grid !. -> put(["Result" countTiles(grid)])

def countTiles grid =
    from polygonfiller import classify
    polygon = findPolygon(grid)
    count = 0
    for x, y in grid.keys():
        if classify(polygon, x, y) == ".":
            count += 1
    return count

def findPolygon grid =
    startPos = None
    startEdges = []
    for pos in grid.keys():
        if grid.get(pos) == "START":
            startPos = pos
        else:
            for next in grid.get(pos, []):
                if grid.get(next) == "START":
                    startEdges.append(pos)
    assert startPos is not None
    assert len(startEdges) == 2
    grid[startPos] = startEdges
    polygon = [startPos]
    while True:
        left, right = grid[polygon[-1]]
        if left not in polygon:
            polygon.append(left)
        elif right not in polygon:
            polygon.append(right)
        else:
            break
    return polygon
