universe Part1 =
    CLI()
    Parser()
    ShortestPathFinder()

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [map:x] !. -> put(x)
    where
        map   = row*:xs !.     -> ["Map" countColumns(xs) len(xs) xs]
        row   = digit*:xs '\n' -> xs
        digit = '1'-'9':x      -> int(x)
    examples
        ["File" "123\n456\n"] -> [
            ["Map"
                3
                2
                [
                    [1 2 3]
                    [4 5 6]
                ]
            ]
        ]

def countColumns rows =
    columns = [len(x) for x in rows]
    assert len(set(columns))
    return columns[0]

actor ShortestPathFinder =
    "Map" .:width .:height .:map -> put(["Result" astar(
        tuple(0 0)
        tuple(dec(width) dec(height))
        map
    )])
    examples
        ["Map" 3 1 [
            [1 2 1]
        ]] -> [["Result" 3]]

def astar start goal map =
    estimates = {start: ideal(start, goal)}
    cost = {start: 0}
    cameFrom = {}
    openSet = [start]
    while openSet:
        openSet = sorted(openSet, key=lambda x: estimates[x])
        next = openSet.pop(0)
        x, y = next
        if next == goal:
            return cost[cameFrom[next]] + map[y][x]
        for neighbour in [(x+1, y)]:
            xn, yn = neighbour
            neighbourCost = cost[next] + map[yn][xn]
            if neighbour not in cost or neighbourCost < cost[neighbour]:
                cameFrom[neighbour] = next
                cost[neighbour] = neighbourCost
                estimates[neighbour] = neighbourCost + ideal(neighbour, goal)
                if neighbour not in openSet:
                    openSet.append(neighbour)
    raise ValueError("no path found")

def ideal start end =
    x1, y1 = start
    x2, y2 = end
    return abs(x1-x2) + abs(y1-y2)
