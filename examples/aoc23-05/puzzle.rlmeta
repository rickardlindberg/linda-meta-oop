actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor AlmanacParser =
    "File" [contents:x] !. -> put(x)
    where
        contents =
            seeds:a
            seedToSoil:b soilToFertilizer:c fertilizerToWater:d
            waterToLight:e lightToTemp:f tempToHumidity:g humidityToLocation:h !.
            -> b -> c -> d -> e -> f -> g -> h
            -> a
        seeds =
            'seeds:' ^number*:xs '\n\n' -> ["Seeds" ~xs]
        seedToSoil =
            'seed-to-soil map:\n' map:x '\n' -> spawn(Mapper("Seed" "Soil" x))
        soilToFertilizer =
            'soil-to-fertilizer map:\n' map:x '\n' -> spawn(Mapper("Soil" "Fertilizer" x))
        fertilizerToWater =
            'fertilizer-to-water map:\n' map:x '\n' -> spawn(Mapper("Fertilizer" "Water" x))
        waterToLight =
            'water-to-light map:\n' map:x '\n' -> spawn(Mapper("Water" "Light" x))
        lightToTemp =
            'light-to-temperature map:\n' map:x '\n' -> spawn(Mapper("Light" "Temp" x))
        tempToHumidity =
            'temperature-to-humidity map:\n' map:x '\n' -> spawn(Mapper("Temp" "Humidity" x))
        humidityToLocation =
            'humidity-to-location map:\n' map:x -> spawn(Mapper("Humidity" "Location" x))

        map = mapLine*
        mapLine = ^number:x ^number:y ^number:z ^'\n' -> [x y z]
        number = '0'-'9':x '0'-'9'*:xs -> int({x xs})
        space = ' '*

actor Mapper #source #target #map =
    #source .:id .:number -> put([target id doMap(map number)])

actor Seeder =
    "Seeds" seed*:xs !.
        -> Counter():next
        -> xs
        -> spawn(PartCollector(0 sub(next() 1) [] ["Locations"]))
    where
        seed = .:x -> put(["Seed" next() x])

actor SeederRange =
    "Seeds" seed*:xs !.
        -> Counter():next
        -> xs
        -> spawn(PartCollector(0 sub(next() 1) [] ["Locations"]))
    where
        seed = .:start .:len -> put(["Seed" next() [[start len]]])

actor LocationMapper =
    "Location" .*:xs -> put(["Part" ~xs])

actor LocationMinimizer =
    "Locations" [.*:xs] -> put(["Result" min(xs)])

actor LocationMinimizerRange =
    "Locations" [locationRange*:xs !.] !. -> put(["Result" min([~~xs])])
    where
        locationRange = [minLocation*:xs !.] -> xs
        minLocation = [.:x . !.] -> x
