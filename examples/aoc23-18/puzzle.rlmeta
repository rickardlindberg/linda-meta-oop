universe Part1 =
    CLI()
    Parser()
    Digger()
    HoleCounter()
    examples
        ["Args" "example.txt"] -> [["Result" 62]]
        ["Args" "input.txt"] -> [["Result" 52231]]

actor CLI =
    "Args" .:input !. -> put(["File" read(input)])

actor Parser =
    "File" [plan:x] !. -> put(x)
    where
        plan        = instruction*:xs !.   -> ["Plan" ~xs]
        instruction =
            direction:d ' '
            number:n ' '
            color:c '\n'
                -> [d n c]
        direction   = 'U' | 'D' | 'L' | 'R'
        number      = digit:x digit*:xs    -> int({ x xs })
        digit       = '0'-'9':x            -> int(x)
        color       = '(' (!')' .)*:xs ')' -> { xs }
    examples
        ["File" "R 9 (#066240)\nU 6 (#113213)\n"] -> [
            ["Plan"
                ["R" 9 "#066240"]
                ["U" 6 "#113213"]
            ]
        ]

actor Digger =
    "Plan" instruction*:xs !.
        -> dict([tuple("x" 0) tuple("y" 0)]):pos
        -> put(["Polygon" render(pos) ~xs])
    where
        instruction =
            | ["U" .:n] -> move(pos 0         negate(n))
            | ["D" .:n] -> move(pos 0         n)
            | ["L" .:n] -> move(pos negate(n) 0)
            | ["R" .:n] -> move(pos n         0)
    examples
        ["Plan"
            ["R" 2 "red"]
            ["D" 2 "green"]
        ] -> [["Polygon"
            tuple(0 0)
            tuple(2 0)
            tuple(2 2)
        ]]

def render pos =
    return (pos["x"], pos["y"])

def move pos dx dy =
    pos["x"] += dx
    pos["y"] += dy
    return render(pos)

def negate x =
    return -1*x

actor HoleCounter =
    "Polygon" .*:xs !. -> put(["Result" pointsInside(xs)])
    examples
        ["Polygon"
            tuple(0 0) tuple(2 0)
                       tuple(2 2)
            tuple(0 2)
        ] -> [["Result" 9]]

def pointsInside points =
    count = 0
    edges = list(getEdges(points))
    for y in range(min(y for x, y in points), max(y for x, y in points)+1):
        for x in range(min(x for x, y in points), max(x for x, y in points)+1):
            insideFlag = False
            atEdge = False
            for kind, at, start, stop in edges:
                if kind == "|":
                    if at == x and start <= y <= stop:
                        atEdge = True
                    if at < x and start < y <= stop:
                        insideFlag = not insideFlag
                elif kind == "-":
                    if at == y and start <= x <= stop:
                        atEdge = True
            if atEdge or insideFlag:
                count += 1
    return count

def getEdges points =
    x1, y1 = points[-1]
    for x2, y2 in points:
        if x1 == x2:
            yield ("|", x1, min(y1, y2), max(y1, y2))
        else:
            assert y1 == y2
            yield ("-", y1, min(x1, x2), max(x1, x2))
        x1, y1 = x2, y2
